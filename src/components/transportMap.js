/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow strict-local
 */

import { StatusBar, StyleSheet, useColorScheme, View } from 'react-native';
import { useTheme } from 'react-native-paper';
import MapLibreGL from '@maplibre/maplibre-react-native';
import {MAPTILER_KEY,MAPTILER_MAP,BACK_ENDPOINT} from '@env';
import { useEffect, useState } from 'react';
import axios from 'axios';
const TransportMap: () => Node = () => {

  MapLibreGL.setAccessToken(null);
  MapLibreGL.setConnected(true);

  const { colors } = useTheme();
  const theme = useColorScheme() === 'light' ? 'dark-content' : 'light-content';
  const [selected, setSelected] = useState(null);
  const stopTimes = [[3.02581,45.8442],[3.03096,45.8449],[3.04782,45.8346],[3.05456,45.8314],[3.05435,45.8282],[3.05144,45.8278],[3.05034,45.8253],[3.05285,45.8217],[3.0573,45.8157],[3.05623,45.809],[3.05599,45.8037],[3.05993,45.7967],[3.06219,45.7941],[3.05941,45.7913],[3.06374,45.7891],[3.06538,45.7874],[3.06502,45.7858],[3.06883,45.7839],[3.07359,45.7819],[3.07638,45.7808],[3.08245,45.7803]]
  let arr = [{
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[3.02581,45.8442],[3.0257,45.8443],[3.02602,45.8445],[3.02679,45.8449],[3.02731,45.8449],[3.02827,45.8451],[3.02877,45.8452],[3.02945,45.8452],[3.03032,45.8451],[3.03119,45.8449],[3.03096,45.8449],[3.03238,45.8444],[3.03289,45.8442],[3.0331,45.8442],[3.03332,45.8443],[3.03328,45.8451],[3.03339,45.8452],[3.03363,45.8453],[3.03387,45.8453],[3.03442,45.8446],[3.03452,45.8443],[3.03441,45.8437],[3.03445,45.8436],[3.03474,45.8434],[3.03578,45.8433],[3.03657,45.843],[3.03757,45.8427],[3.03825,45.8426],[3.03891,45.8425],[3.03928,45.8424],[3.03993,45.842],[3.04036,45.8416],[3.04056,45.8415],[3.04089,45.8413],[3.04105,45.8411],[3.04124,45.841],[3.04172,45.8409],[3.04225,45.8408],[3.04276,45.8405],[3.04289,45.8399],[3.04322,45.8396],[3.04361,45.8394],[3.04388,45.8394],[3.0447,45.8396],[3.04499,45.8396],[3.0452,45.8395],[3.04532,45.8394],[3.0453,45.839],[3.04519,45.8387],[3.04491,45.8384],[3.04477,45.8382],[3.04477,45.838],[3.04487,45.8377],[3.04538,45.8373],[3.04588,45.8369],[3.04654,45.8366],[3.04664,45.8365],[3.04658,45.8361],[3.04654,45.8355],[3.04667,45.8351],[3.04682,45.8349],[3.04701,45.8347],[3.04782,45.8346],[3.04824,45.8345],[3.04875,45.8344],[3.04941,45.8342],[3.05097,45.8338],[3.05219,45.8333],[3.05285,45.833],[3.05365,45.8325],[3.05422,45.8321],[3.05441,45.832],[3.05445,45.832],[3.05449,45.8318],[3.05445,45.8317],[3.05446,45.8316],[3.05456,45.8314],[3.05467,45.8309],[3.05472,45.8306],[3.05477,45.8305],[3.05485,45.83],[3.05474,45.8297],[3.05418,45.8292],[3.05423,45.8291],[3.05435,45.8282],[3.05435,45.828],[3.05436,45.8279],[3.05449,45.8275],[3.05444,45.8273],[3.05435,45.8272],[3.05395,45.8272],[3.05345,45.8273],[3.05312,45.8273],[3.05278,45.8275],[3.05259,45.8277],[3.05144,45.8278],[3.0518,45.8278],[3.05146,45.8278],[3.05118,45.8276],[3.05089,45.8275],[3.05046,45.8273],[3.05006,45.8272],[3.04988,45.8271],[3.04979,45.827],[3.04963,45.8266],[3.04978,45.8265],[3.04987,45.8263],[3.04996,45.8261],[3.05034,45.8253],[3.05044,45.8254],[3.05084,45.8249],[3.05128,45.8246],[3.05189,45.8242],[3.05249,45.8239],[3.05278,45.8237],[3.05287,45.8234],[3.05285,45.8229],[3.05276,45.8226],[3.05285,45.8217],[3.05297,45.8213],[3.05331,45.8208],[3.05359,45.8204],[3.05378,45.8197],[3.05385,45.8195],[3.05414,45.819],[3.05447,45.8185],[3.0546,45.818],[3.05469,45.8178],[3.05521,45.8174],[3.05559,45.817],[3.0561,45.8167],[3.0573,45.8157],[3.05752,45.8155],[3.05759,45.815],[3.05758,45.8145],[3.05754,45.8142],[3.05725,45.814],[3.05711,45.8138],[3.05705,45.8135],[3.05709,45.8131],[3.05714,45.8124],[3.05723,45.8122],[3.05708,45.8118],[3.05679,45.811],[3.0567,45.8108],[3.05664,45.8105],[3.05672,45.8094],[3.05668,45.8093],[3.05643,45.8091],[3.05623,45.809],[3.05622,45.8088],[3.05592,45.8085],[3.05582,45.8081],[3.05572,45.8077],[3.05575,45.8074],[3.05562,45.8071],[3.05586,45.8069],[3.05583,45.8065],[3.05583,45.8063],[3.05576,45.8062],[3.05562,45.8061],[3.05558,45.806],[3.05558,45.8051],[3.05561,45.8049],[3.056,45.8045],[3.05607,45.8044],[3.05599,45.8037],[3.05597,45.8028],[3.05595,45.8023],[3.05582,45.802],[3.05582,45.8017],[3.05591,45.8015],[3.0561,45.8013],[3.05659,45.8008],[3.05674,45.8004],[3.05692,45.7997],[3.05706,45.7995],[3.05725,45.7992],[3.05747,45.799],[3.05814,45.7984],[3.05917,45.7973],[3.05938,45.797],[3.05939,45.7969],[3.05952,45.7968],[3.05993,45.7967],[3.06068,45.7965],[3.06091,45.7963],[3.06124,45.796],[3.06157,45.7957],[3.06179,45.7952],[3.06198,45.7946],[3.06219,45.7941],[3.06253,45.7934],[3.06275,45.7929],[3.06261,45.7927],[3.06245,45.7926],[3.06214,45.7925],[3.06161,45.7925],[3.06142,45.7924],[3.06124,45.7922],[3.06093,45.7917],[3.06079,45.7915],[3.06056,45.7915],[3.05961,45.7914],[3.05941,45.7913],[3.05928,45.7911],[3.05924,45.7908],[3.05922,45.7905],[3.05927,45.7903],[3.05941,45.7902],[3.05964,45.79],[3.06152,45.7895],[3.06241,45.7893],[3.06373,45.789],[3.06374,45.789],[3.06398,45.7888],[3.06407,45.7886],[3.06418,45.7881],[3.06429,45.7878],[3.06453,45.7877],[3.06501,45.7875],[3.0653,45.7873],[3.06572,45.7872],[3.06591,45.7871],[3.06603,45.7868],[3.06604,45.7866],[3.06589,45.7865],[3.06578,45.7864],[3.06545,45.7863],[3.06519,45.7861],[3.06496,45.7858],[3.06478,45.7856],[3.06467,45.7854],[3.0647,45.7854],[3.06501,45.785],[3.06524,45.7848],[3.06699,45.7844],[3.06817,45.7842],[3.06883,45.7839],[3.07071,45.7832],[3.07122,45.783],[3.07187,45.7827],[3.07232,45.7825],[3.07357,45.7818],[3.0736,45.782],[3.07562,45.781],[3.07599,45.7809],[3.07661,45.7808],[3.07637,45.7808],[3.0778,45.7808],[3.07899,45.7808],[3.07989,45.7808],[3.08129,45.7809],[3.08167,45.7806],[3.08177,45.7805],[3.08182,45.7804],[3.08183,45.7803],[3.08245,45.7803]]
    }
  }];
  stopTimes.map((stop) => {
  arr.push({
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [stop[0], stop[1]]
    }
   })
  })

  let fet = {
    type: 'FeatureCollection',
    features: arr
  }

  let getMap = async () => {
    let res = await axios.get(`${BACK_ENDPOINT}/routes/info/maps`);
    console.log(res);
  }

  useEffect(() => {
    getMap();
  }, );


  return (
    <View style={styles.page}>
      <StatusBar backgroundColor={colors.background} barStyle={theme} />
        <MapLibreGL.MapView
          style={styles.map}
          logoEnabled={false}
          styleURL={`https://api.maptiler.com/maps/${MAPTILER_MAP}/style.json?key=${MAPTILER_KEY}`}
        >
          <MapLibreGL.Camera
            zoomLevel={11.35}
            maxZoomLevel={24}
            minZoomLevel={0}
            centerCoordinate={[3.08748, 45.77332]}
            coordinate={[3.08748, 45.77332]}
          />

          <MapLibreGL.ShapeSource id="shape-source" shape={fet}>
            <MapLibreGL.LineLayer
              id="shape-layer"
              style={{
                lineColor: '#3ab7c2',
                lineWidth: 3,
                lineJoin: 'round',
                lineCap: 'round',
              }}
            />
            <MapLibreGL.SymbolLayer id={'symbol-layer'} style={{
              iconImage: require('../assets/img/ellipse.png'),
              iconSize: 0.5,
            }} />
          </MapLibreGL.ShapeSource>
        </MapLibreGL.MapView>
    </View>
  )

};

const styles = StyleSheet.create({
  page: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  map: {
    flex: 1,
    alignSelf: 'stretch',
  }
});
export default TransportMap;

